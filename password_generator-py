import random
import string
import requests
import hashlib

# Global default configuration
default_config = {
    "length": 14,
    "num_upper": 2,
    "num_lower": 1,
    "num_digits": 2,
    "num_symbols": 2
}

# Function to check if a password exists in a dictionary using Have I Been Pwned API
def check_password_in_pwned(password):
    sha1_hash = hashlib.sha1(password.encode('utf-8')).hexdigest().upper()
    first_5_chars = sha1_hash[:5]
    rest_of_hash = sha1_hash[5:]
    
    response = requests.get(f'https://api.pwnedpasswords.com/range/{first_5_chars}')
    
    if response.status_code == 200:
        return rest_of_hash in response.text
    else:
        raise Exception("Error connecting to the Have I Been Pwned API.")

# Function to generate a secure password with custom configuration
def generate_secure_password(length=14, num_upper=2, num_lower=1, num_digits=2, num_symbols=2):
    while True:
        password = generate_password(length, num_upper, num_lower, num_digits, num_symbols)
        if not check_password_in_pwned(password):
            return password

# Function to generate a password with custom rules
def generate_password(length, num_upper, num_lower, num_digits, num_symbols):
    if length < 7:
        raise ValueError("Password length must be at least 7 characters.")
    
    upper_case = random.choices(string.ascii_uppercase, k=num_upper)
    lower_case = random.choices(string.ascii_lowercase, k=num_lower)
    digits = random.choices(string.digits, k=num_digits)
    symbols = random.choices(string.punctuation, k=num_symbols)
    
    remaining_length = length - (num_upper + num_lower + num_digits + num_symbols)
    remaining_chars = random.choices(string.ascii_letters + string.digits + string.punctuation, k=remaining_length)

    password_list = upper_case + lower_case + digits + symbols + remaining_chars
    random.shuffle(password_list)
    
    return ''.join(password_list)

# Function to create a .txt file with a list of generated passwords
def generate_password_file(num_passwords, length=14, num_upper=2, num_lower=1, num_digits=2, num_symbols=2, file_name="passwords.txt"):
    passwords = []
    
    for _ in range(num_passwords):
        password = generate_secure_password(length, num_upper, num_lower, num_digits, num_symbols)
        passwords.append(password)
    
    with open(file_name, "w") as file:
        for password in passwords:
            file.write(password + "\n")
    
    print(f"Password list saved as {file_name}")

# Function to change the default configuration
def change_default_config():
    global default_config
    
    print("\nCurrent default configuration:")
    print(f"Length: {default_config['length']}, Uppercase: {default_config['num_upper']}, Lowercase: {default_config['num_lower']}, Digits: {default_config['num_digits']}, Symbols: {default_config['num_symbols']}")
    
    default_config["length"] = int(input(f"Enter password length (default {default_config['length']}): ") or default_config["length"])
    default_config["num_upper"] = int(input(f"Enter number of uppercase letters (default {default_config['num_upper']}): ") or default_config["num_upper"])
    default_config["num_lower"] = int(input(f"Enter number of lowercase letters (default {default_config['num_lower']}): ") or default_config["num_lower"])
    default_config["num_digits"] = int(input(f"Enter number of digits (default {default_config['num_digits']}): ") or default_config["num_digits"])
    default_config["num_symbols"] = int(input(f"Enter number of symbols (default {default_config['num_symbols']}): ") or default_config["num_symbols"])
    
    print("Default configuration updated successfully!\n")

# Main function to execute the password generator
def password_generator():
    while True:
        print("\n--- Password Generator ---")
        print("1. Generate a password")
        print("2. Check if a password exists in a dictionary")
        print("3. Generate a list of passwords in a text file")
        print("4. Change default configuration")
        print("5. Exit")
        
        choice = input("Select an option (1-5): ")
        
        if choice == "1":
            print("You can use the default configuration or customize your own.")
            use_default = input("Do you want to use the default configuration? (yes/no): ").lower()
            
            if use_default == "yes":
                length = default_config["length"]
                num_upper = default_config["num_upper"]
                num_lower = default_config["num_lower"]
                num_digits = default_config["num_digits"]
                num_symbols = default_config["num_symbols"]
            else:
                length = int(input(f"Enter the length of the password (default {default_config['length']}): ") or default_config["length"])
                num_upper = int(input(f"Enter the number of uppercase letters (default {default_config['num_upper']}): ") or default_config["num_upper"])
                num_lower = int(input(f"Enter the number of lowercase letters (default {default_config['num_lower']}): ") or default_config["num_lower"])
                num_digits = int(input(f"Enter the number of digits (default {default_config['num_digits']}): ") or default_config["num_digits"])
                num_symbols = int(input(f"Enter the number of symbols (default {default_config['num_symbols']}): ") or default_config["num_symbols"])
            
            password = generate_secure_password(length, num_upper, num_lower, num_digits, num_symbols)
            
            print("This password was not found in a data breach. This password is safe!")
            print(f"Generated password: {password}")
            
        elif choice == "2":
            password_to_check = input("Enter the password to check: ")
            if check_password_in_pwned(password_to_check):
                print("This password has been found in a data breach!")
            else:
                print("This password was not found in a data breach. This password is safe!")
        
        elif choice == "3":
            num_passwords = int(input("Enter the number of passwords to generate: "))
            use_default = input("Do you want to use the default configuration for this list? (yes/no): ").lower()
            
            if use_default == "yes":
                generate_password_file(num_passwords)
            else:
                length = int(input(f"Enter the length of the password (default {default_config['length']}): ") or default_config["length"])
                num_upper = int(input(f"Enter the number of uppercase letters (default {default_config['num_upper']}): ") or default_config["num_upper"])
                num_lower = int(input(f"Enter the number of lowercase letters (default {default_config['num_lower']}): ") or default_config["num_lower"])
                num_digits = int(input(f"Enter the number of digits (default {default_config['num_digits']}): ") or default_config["num_digits"])
                num_symbols = int(input(f"Enter the number of symbols (default {default_config['num_symbols']}): ") or default_config["num_symbols"])
                generate_password_file(num_passwords, length, num_upper, num_lower, num_digits, num_symbols)
        
        elif choice == "4":
            change_default_config()
        
        elif choice == "5":
            print("Exiting...")
            exit()  # Now correctly exits the program
        
        else:
            print("Invalid option. Please try again.")

if __name__ == "__main__":
    password_generator()
