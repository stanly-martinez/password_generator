import random
import string
import requests
import hashlib
import os

# Function to check if password exists in a dictionary using Have I Been Pwned API
def check_password_in_pwned(password):
    # Hash the password using SHA-1 (as required by the API)
    sha1_hash = hashlib.sha1(password.encode('utf-8')).hexdigest().upper()
    first_5_chars = sha1_hash[:5]
    rest_of_hash = sha1_hash[5:]
    
    # Send the request to the API
    response = requests.get(f'https://api.pwnedpasswords.com/range/{first_5_chars}')
    
    if response.status_code == 200:
        # Check if the password hash exists in the API response
        if rest_of_hash in response.text:
            return True
        else:
            return False
    else:
        raise Exception("Error connecting to the Have I Been Pwned API.")

# Function to generate a secure password with user-defined specifications
def generate_password(length=14, num_upper=2, num_digits=2, num_symbols=2):
    if length < num_upper + num_digits + num_symbols:
        raise ValueError("Password length is too short for the specified number of uppercase, digits, and symbols.")
    
    # Create lists for each character set
    upper_case = random.choices(string.ascii_uppercase, k=num_upper)
    lower_case = random.choices(string.ascii_lowercase, k=length - num_upper - num_digits - num_symbols)
    digits = random.choices(string.digits, k=num_digits)
    symbols = random.choices(string.punctuation, k=num_symbols)
    
    # Combine all parts
    password_list = upper_case + lower_case + digits + symbols
    random.shuffle(password_list)
    
    # Return the generated password as a string
    return ''.join(password_list)

# Function to create a .txt file with a list of generated passwords
def generate_password_file(num_passwords, length=14, num_upper=2, num_digits=2, num_symbols=2, file_name="passwords.txt"):
    passwords = []
    for _ in range(num_passwords):
        password = generate_password(length, num_upper, num_digits, num_symbols)
        passwords.append(password)
    
    # Write the passwords to the file
    with open(file_name, "w") as file:
        for password in passwords:
            file.write(password + "\n")
    
    print(f"Password list saved as {file_name}")

# Main function to execute the password generator
def password_generator():
    print("--- Password Generator ---")
    print("1. Generate a password")
    print("2. Check if a password exists in a dictionary")
    print("3. Generate a list of passwords in a text file")
    print("4. Exit")
    
    choice = input("Select an option (1-4): ")
    
    if choice == "1":
        print("Default password settings: 14 characters, 2 uppercase letters, 2 digits, 2 symbols.")
        length = int(input("Enter the length of the password (default 14): ") or 14)
        num_upper = int(input("Enter the number of uppercase letters (default 2): ") or 2)
        num_digits = int(input("Enter the number of digits (default 2): ") or 2)
        num_symbols = int(input("Enter the number of symbols (default 2): ") or 2)
        
        password = generate_password(length, num_upper, num_digits, num_symbols)
        print(f"Generated password: {password}")
        
        if check_password_in_pwned(password):
            print("Warning: This password has been found in a data breach!")
        else:
            print("This password is safe!")
        
    elif choice == "2":
        password_to_check = input("Enter the password to check: ")
        if check_password_in_pwned(password_to_check):
            print("This password has been found in a data breach!")
        else:
            print("This password is safe!")
    
    elif choice == "3":
        num_passwords = int(input("Enter the number of passwords to generate: "))
        file_name = input("Enter the file name to save (default 'passwords.txt'): ") or "passwords.txt"
        generate_password_file(num_passwords, file_name=file_name)
    
    elif choice == "4":
        print("Exiting...")
    
    else:
        print("Invalid option. Please try again.")

if __name__ == "__main__":
    password_generator()
